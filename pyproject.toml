[tool.poetry]
name = "skyhal"
version = "0.1.0"
description = "SkyHAL - Assistente de IA para automação e gerenciamento de infraestrutura"
authors = ["Armando Guimarães <armando.rogerio.jr@gmail.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.100.0"
uvicorn = "^0.22.0"
sqlalchemy = "^2.0.17"
pydantic = "^2.0.2"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
aiofiles = "^23.1.0"
urllib3 = "^2.0.7" # Para requisições HTTP seguras

# Observabilidade
structlog = "^23.1.0"
opentelemetry-api = "^1.20.0"
opentelemetry-sdk = "^1.20.0"
opentelemetry-instrumentation = "^0.41b0"
opentelemetry-instrumentation-fastapi = "^0.41b0"
opentelemetry-instrumentation-requests = "^0.41b0"
opentelemetry-instrumentation-sqlalchemy = "^0.41b0"
opentelemetry-instrumentation-logging = "^0.41b0"
opentelemetry-exporter-otlp = "^1.20.0"
opentelemetry-exporter-jaeger = "^1.20.0"
prometheus-client = "^0.17.0"
python-json-logger = "^2.0.7"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"
pytest-mock = "^3.11.1"
black = "^23.3.0"
ruff = "^0.5.3"
mypy = "^1.4.1"
bandit = "^1.7.5"
safety = "^2.3.5"
pre-commit = "^3.3.3"
httpx = "^0.24.1"
responses = "^0.23.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "C901",  # function is too complex (temporarily ignore)
    "E501",  # line too long (handled by black)
]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.mypy]
python_version = "3.13"
allow_untyped_decorators = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
disallow_untyped_decorators = false
disallow_untyped_calls = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
ignore_missing_imports = true
disable_error_code = ["attr-defined"]
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = ["tests.*"]
allow_untyped_decorators = true
disable_error_code = ["misc"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=src --cov-report=term-missing"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
